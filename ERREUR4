createAMFeesUI <- function(id, reactiveReportObject, user = "", tokenUI = "") {
  ns <- NS(id)

  # Petit utilitaire pour formatter les nombres avec espace (cot√© JS)
  number_renderer <- "
  function(instance, td, row, col, prop, value, cellProperties) {
    Handsontable.renderers.NumericRenderer.apply(this, arguments);
    if (value !== null && value !== undefined && value !== '') {
      var s = value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ');
      td.innerHTML = s;
    }
  }"

  observe({
    req(reactiveReportObject$app)
    appSelected <- reactiveReportObject$app
    if (!tolower(gsub_underscore_dash(\" \", \"_\", appSelected)) %in% c(\"am_fees\")) {
      return()
    }

    showPageSpinner()
    tryCatch({
      # Nettoyage
      removeUI(selector = paste0(\"#\", id, \"ContentAnalysis\"), immediate = TRUE)

      data_list <- reactiveReportObject$reportData
      if (is.null(data_list)) {
        hidePageSpinner()
        return()
      }
      if (!is.list(data_list)) {
        data_list <- list(data_list)
        names(data_list) <- c(\"Report\")
      }

      # Construction des onglets
      tabs <- Map(function(i) list(id = paste0(id, \"-\", i, \"_\", tokenUI), name = names(data_list)[i]),
                  seq_len(length(data_list)))

      ui_root <- tags$div(
        id = paste0(id, \"ContentAnalysis\"),
        class = \"row\",
        tags$div(class = \"col-12 mb-2\",
          downloadButton(ns(paste0(\"download_all_data_excel_\", tokenUI)),
                         \"üì¶ Download all in Excel\", class = \"btn btn-primary my-2\")
        ),
        tags$div(class = \"col-12\", Generate_dashboard_tabs_table(tabs))  # suppose cr√©er les placeholders
      )

      insertUI(selector = paste0(\"#\", id, \"Content\"), ui = ui_root, immediate = TRUE)

      # Remplissage par onglet
      for (i in seq_along(data_list)) {
        local({
          idx <- i
          df <- data_list[[idx]]
          table_name <- names(data_list)[idx]
          tab_id <- paste0(id, \"-\", idx, \"_\", tokenUI)

          # Contr√¥les au-dessus du tableau
          insertUI(
            selector = paste0(\"#nav-\", tab_id),
            where = \"afterBegin\",
            ui = tags$div(
              class = \"my-3\",
              fluidRow(
                column(
                  12, class = \"d-flex justify-content-between align-items-center mb-2\",
                  downloadButton(outputId = paste0(\"download_\", tab_id, \"_\", tokenUI),
                                 label = \"üì• Download CSV\", class = \"btn btn-sm btn-success\")
                )
              )
            )
          )

          # Pr√©paration des donn√©es + ligne Total (si applicable)
          output[[paste0(\"td_dashboard_\", tab_id)]] <- rhandsontable::renderRHandsontable({
            req(df)
            df_clean <- as.data.table(df)
            num_cols <- names(df_clean)[vapply(df_clean, is.numeric, logical(1))]

            show_total <- grepl(\"calcul_report|kpi_axa_im_report\",
                                gsub_underscore_dash(\" \", \"_\", tolower(table_name)))

            if (show_total && length(num_cols) > 0) {
              total_row <- df_clean[, lapply(.SD, function(x) if (is.numeric(x)) sum(x, na.rm = TRUE) else NA),
                                    .SDcols = num_cols]
              # Remplir les non-num√©riques avec \"Total\"
              non_num <- setdiff(names(df_clean), num_cols)
              if (length(non_num) > 0) {
                total_row[, (non_num) := lapply(non_num, function(x) \"Total\")]
              }
              df_clean <- rbind(df_clean, total_row, fill = TRUE)
            }

            # Construire la table Handson
            ht <- rhandsontable::rhandsontable(
              df_clean,
              rowHeaders = NULL,
              readOnly   = TRUE,
              stretchH   = \"all\",
              contextMenu = TRUE,
              columnSorting = TRUE,
              height = 500
            )

            # D√©finir les colonnes num√©riques avec renderer de milliers
            if (length(num_cols) > 0) {
              for (colname in num_cols) {
                ht <- rhandsontable::hot_col(
                  ht, col = colname,
                  type = \"numeric\",
                  renderer = htmlwidgets::JS(number_renderer)
                )
              }
            }

            # Mettre en gras la derni√®re ligne si Total
            if (show_total) {
              last_row_idx <- nrow(df_clean) - 1L  # Handsontable est 0-index pour hot_row
              ht <- rhandsontable::hot_row(ht, row = last_row_idx,
                                           readOnly = TRUE,
                                           className = \"htBold ht__highlight\")
              # L√©ger CSS en ligne pour surligner
              ht <- rhandsontable::hot_cols(ht, renderer = htmlwidgets::JS(number_renderer))
              ht$x$contextMenu <- TRUE
              ht$dependencies <- c(ht$dependencies, list(
                htmltools::htmlDependency(
                  name = \"ht-total-style\",
                  version = \"1.0\",
                  src = c(),
                  stylesheet = c()
                )
              ))
              # Injecter un style pour la ligne Total (via runjs apr√®s le rendu si besoin)
            }

            ht
          })

          # T√©l√©chargement CSV (inchang√©)
          output[[paste0(\"download_\", tab_id, \"_\", tokenUI)]] <- downloadHandler(
            filename = function() paste0(gsub(\"[\\\\/:*?\\\"<>|]\", \"_\", table_name), \".csv\"),
            content = function(file) {
              data.table::fwrite(df, file, row.names = FALSE, sep = user_separator(), quote = TRUE)
            }
          )
        })
      }

      # T√©l√©charger tout en Excel (inchang√©)
      output[[ns(paste0(\"download_all_data_excel_\", tokenUI))]] <- downloadHandler(
        filename = function() paste0(\"AMFees_Report_\", Sys.Date(), \".xlsx\"),
        content = function(file) {
          openxlsx::write.xlsx(data_list, file)
        }
      )

      hidePageSpinner()
      runjs(\"$('a[href=\\\"#historyAnalysis\\\"]').click();\")
    }, error = function(e) {
      print(e)
      hidePageSpinner()
      runjs(\"toastr.error('Error.. please retry again','',toastr.options.timeOut='500');\")
    })
  })
}
