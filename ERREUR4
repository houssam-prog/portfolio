createAMFeesUI <- function(id, reactiveReportObject, user = "", tokenUI = "") {
  ns <- NS(id)

  observe({
    req(reactiveReportObject$app)
    appSelected <- reactiveReportObject$app
    if (!tolower(gsub_underscore_dash(" ", "_", appSelected)) %in% c("am_fees")) {
      return()
    }

    showPageSpinner()
    tryCatch({
      removeUI(selector = paste0("#", id, "ContentAnalysis"), immediate = TRUE)

      data_list <- reactiveReportObject$reportData
      if (is.null(data_list)) {
        hidePageSpinner()
        return()
      }
      if (!is.list(data_list)) {
        data_list <- list(data_list)
        names(data_list) <- c("Report")
      }

      tabs <- Map(function(i) list(id = paste0(id, "-", i, "_", tokenUI), name = names(data_list)[i]), seq_len(length(data_list)))

      ui_root <- tags$div(
        id = paste0(id, "ContentAnalysis"),
        class = "row",
        tags$div(class = "col-12 mb-2",
          downloadButton(ns(paste0("download_all_data_excel_", tokenUI)), "ðŸ“¦ Download all in Excel", class = "btn btn-primary my-2")
        ),
        tags$div(class = "col-12", Generate_dashboard_tabs_table(tabs))
      )

      insertUI(selector = paste0("#", id, "Content"), ui = ui_root, immediate = TRUE)

      for (i in seq_along(data_list)) {
        local({
          idx <- i
          df <- data_list[[idx]]
          table_name <- names(data_list)[idx]
          tab_id <- paste0(id, "-", idx, "_", tokenUI)

          insertUI(
            selector = paste0("#nav-", tab_id),
            where = "afterBegin",
            ui = tags$div(
              class = "my-3",
              fluidRow(
                column(
                  12,
                  class = "d-flex justify-content-between align-items-center mb-2",
                  downloadButton(
                    outputId = paste0("download_", tab_id, "_", tokenUI),
                    label = "ðŸ“¥ Download CSV",
                    class = "btn btn-sm btn-success"
                  )
                ),
                column(
                  12,
                  rhandsontable::rHandsontableOutput(
                    outputId = paste0("td_dashboard_", tab_id),
                    width = "100%", height = "auto"
                  )
                )
              )
            )
          )

          output[[paste0("td_dashboard_", tab_id)]] <- rhandsontable::renderRHandsontable({
            num_cols <- names(df)[sapply(df, is.numeric)]
            df_clean <- df
            show_total <- grepl("calcul_report|kpi_axa_im_report", gsub_underscore_dash(" ", "_", tolower(table_name)))

            if (show_total && length(num_cols) > 0) {
              # Initialiser ligne vide
              total_row <- as.list(rep(NA, length(df_clean)))
              names(total_row) <- names(df_clean)

              # Ajouter totaux pour les colonnes numÃ©riques
              for (col in num_cols) {
                total_row[[col]] <- sum(df_clean[[col]], na.rm = TRUE)
              }

              # PremiÃ¨re colonne non numÃ©rique = "Total", les autres = ""
              text_cols <- setdiff(names(df_clean), num_cols)
              if (length(text_cols) > 0) {
                total_row[[text_cols[1]]] <- "Total"
                if (length(text_cols) > 1) {
                  for (col in text_cols[-1]) {
                    total_row[[col]] <- ""
                  }
                }
              }

              # Ajouter ligne total
              total_row_dt <- data.table::as.data.table(total_row)
              df_clean <- rbind(df_clean, total_row_dt, fill = TRUE)
            }

            # Affichage avec rhandsontable
            table_output <- rhandsontable::rhandsontable(
              df_clean,
              rowHeaders = NULL,
              useTypes = TRUE,
              width = "100%"
            ) %>%
              rhandsontable::hot_col(col = num_cols, format = "0,0")

            # Mettre la ligne "Total" en gras
            if (show_total) {
              total_row_index <- nrow(df_clean)
              table_output <- table_output %>%
                rhandsontable::hot_rows(rows = total_row_index, style = "font-weight: bold; background-color: #f9f9f9;")
            }

            table_output
          })

          output[[paste0("download_", tab_id, "_", tokenUI)]] <- downloadHandler(
            filename = function() paste0(gsub("[\\/:*?\"<>|]", "_", table_name), ".csv"),
            content = function(file) {
              fwrite(df, file, row.names = FALSE, sep = user_separator(), quote = TRUE)
            }
          )
        })
      }

      output[[ns(paste0("download_all_data_excel_", tokenUI))]] <- downloadHandler(
        filename = function() paste0("AMFees_Report_", Sys.Date(), ".xlsx"),
        content = function(file) {
          openxlsx::write.xlsx(data_list, file)
        }
      )

      hidePageSpinner()
      runjs("$('a[href=\"#historyAnalysis\"]').click();")
    }, error = function(e) {
      print(e)
      hidePageSpinner()
      runjs("toastr.error('Error.. please retry again','',toastr.options.timeOut='500');")
    })
  })
}
