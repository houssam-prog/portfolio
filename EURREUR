createAMFeesUI <- function(id, reactiveReportObject, user = "", tokenUI = "") {
  ns <- NS(id)

  observe({
    req(reactiveReportObject$app)
    appSelected <- reactiveReportObject$app
    if (!tolower(gsub_underscore_dash(" ", "_", appSelected)) %in% c("am_fees_report")) {
      return()
    }

    showPageSpinner()
    tryCatch({
      # Cleanup previous content
      removeUI(selector = paste0("#", id, "ContentAnalysis"), immediate = TRUE)

      data_list <- reactiveReportObject$reportData
      if (is.null(data_list)) {
        hidePageSpinner()
        return()
      }
      if (!is.list(data_list)) {
        data_list <- list(data_list)
        names(data_list) <- c("Report")
      }

      # Build tabs for the 3 specific reports
      tabs <- Map(function(i) list(id = paste0(id, "-", i, "_", tokenUI), name = names(data_list)[i]), seq_len(length(data_list)))

      ui_root <- tags$div(
        id = paste0(id, "ContentAnalysis"),
        class = "row",
        tags$div(class = "col-12 mb-2",
          downloadButton(ns(paste0("download_all_data_excel_", tokenUI)), "ðŸ“¦ Download all reports in Excel", class = "btn btn-primary my-2")
        ),
        tags$div(class = "col-12", Generate_dashboard_tabs_table(tabs, typseOfTable = rep("DT", length(tabs))))
      )

      insertUI(selector = paste0("#", id, "Content"), ui = ui_root, immediate = TRUE)

      # Populate each tab content
      for (i in seq_along(data_list)) {
        local({
          idx <- i
          df <- data_list[[idx]]
          table_name <- names(data_list)[idx]

          tab_id <- paste0(id, "-", idx, "_", tokenUI)

          # Add per-tab controls (download button) above the DT
          insertUI(
            selector = paste0("#nav-", tab_id),
            where = "afterBegin",
            ui = tags$div(
              class = "my-3",
              fluidRow(
                column(12, class = "d-flex justify-content-between align-items-center mb-2",
                  downloadButton(outputId = paste0("download_", tab_id, "_", tokenUI), label = "ðŸ“¥ Download CSV", class = "btn btn-sm btn-success")
                )
              )
            )
          )

          # Create DataTable for each report
          output[[paste0("td_dashboard_", tab_id)]] <- renderDT({
            num_cols <- names(df)[sapply(df, is.numeric)]
            df_clean <- df
            
            # Determine if we need to show totals - only for final report
            show_total <- grepl("finale|final", gsub_underscore_dash(" ", "_", tolower(table_name)))
            
            if (show_total && length(num_cols) > 0) {
              total_row <- df_clean[, lapply(.SD, function(x) if (is.numeric(x)) sum(x, na.rm = TRUE) else NA), .SDcols = num_cols]
              total_row[, setdiff(names(df_clean), num_cols) := lapply(setdiff(names(df_clean), num_cols), function(x) "Total")]
              df_clean <- rbind(df_clean, total_row, fill = TRUE)
            }
            
            # Create DataTable with appropriate options
            dt <- datatable(
              df_clean,
              rownames = FALSE,
              options = list(
                paging = TRUE,
                pageLength = 25,
                dom = 'Bfrtip',
                autoWidth = TRUE,
                ordering = TRUE,
                scrollX = TRUE,
                buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
              ),
              filter = "top",
              extensions = 'Buttons'
            )
            
            # Format numeric columns
            for (col in num_cols) {
              if (grepl("rate|percentage|%|pct", tolower(col))) {
                # Format as percentage
                dt <- DT::formatPercentage(dt, columns = col, digits = 2)
              } else if (grepl("fee|amount|value|cost|prix|montant", tolower(col))) {
                # Format as currency
                dt <- DT::formatCurrency(dt, columns = col, currency = "â‚¬", digits = 2, interval = 3, mark = " ")
              } else {
                # Format as number with separators
                dt <- DT::formatRound(dt, columns = col, digits = 2, mark = " ")
              }
            }
            
            # Style total row if present
            if (show_total) {
              dt <- DT::formatStyle(dt, columns = 0, target = "row", rows = nrow(df_clean), fontWeight = "bold", backgroundColor = "#f0f8ff")
            }
            
            # Custom styling - only for final report
            if (grepl("finale|final", gsub_underscore_dash(" ", "_", tolower(table_name)))) {
              dt <- DT::formatStyle(dt, columns = names(df_clean), backgroundColor = "#fff0f5")
            }
            
            dt
          })

          # Downloads for individual tabs
          output[[paste0("download_", tab_id, "_", tokenUI)]] <- downloadHandler(
            filename = function() paste0("AMFees_", gsub("[\\/:*?\"<>|]", "_", table_name), "_", Sys.Date(), ".csv"),
            content = function(file) {
              fwrite(df, file, row.names = FALSE, sep = user_separator(), quote = TRUE)
            }
          )
        })
      }

      # Download all reports to Excel
      output[[ns(paste0("download_all_data_excel_", tokenUI))]] <- downloadHandler(
        filename = function() paste0("AMFees_AllReports_", Sys.Date(), ".xlsx"),
        content = function(file) {
          # For testing with single final report
          final_list <- list("Rapport_Finale" = data_list[[1]])
          openxlsx::write.xlsx(final_list, file)
        }
      )

      hidePageSpinner()
      runjs("$('a[href=\"#historyAnalysis\"]').click();")
    }, error = function(e) {
      print(paste("Error in createAMFeesUI:", e$message))
      hidePageSpinner()
      runjs("toastr.error('Erreur lors du chargement des rapports AM Fees. Veuillez rÃ©essayer.','',toastr.options.timeOut='3000');")
    })
  })
}









process_dashboard_risk_framework_liquidity <- function(params) {
    appSelected <- params$runInfo$appSelected
    run_date <- params$runInfo$runDate
    environment <- params$environment

    engine_output <- fread(path_admin_param_engine_output, sep = global_separator)
    tempOutput <- engine_output[tolower(gsub_underscore_dash(" ", "_", engine_output$app)) == tolower(gsub_underscore_dash(" ", "_", appSelected)),]
    files <- tempOutput[tolower(tempOutput$type) == "file", ]
    files$tableaddress <- sprintf(as.character(files$tableaddress), run_date)
    files <- files[!grepl("awa", tolower(files$output)), ]

    prod_path <- paste0(foundationRuns_dbfs_root_path, "/", gsub_underscore_dash(" ", "_", tolower(appSelected)), "/", environment, "/Outputs/", run_date)
    data <- list()
    j <- 1
    for(i in 1:nrow(files)){
        file_path <- file.path(prod_path, files$tableaddress[i])
        if(grepl(".csv", file_path)){
            data[[j]] <- fread(file_path, sep = global_separator)
            names(data)[j] <- files$output[i]
        }
        j <- j + 1
    }


    return(data)
}
