createRFLiquidityUI <- function(id, reactiveReportObject, user = "", tokenUI = "") {
  ns <- NS(id)

  observe({
    req(reactiveReportObject$app)
    appSelected <- reactiveReportObject$app
    if (!tolower(gsub_underscore_dash(" ", "_", appSelected)) %in% c("rf_liquidity")) {
      return()
    }

    showPageSpinner()
    tryCatch({
      # Cleanup previous content
      removeUI(selector = paste0("#", id, "ContentAnalysis"), immediate = TRUE)

      data_list <- reactiveReportObject$reportData
      if (is.null(data_list)) {
        hidePageSpinner()
        return()
      }
      if (!is.list(data_list)) {
        data_list <- list(data_list)
        names(data_list) <- c("Report")
      }


      # Build tabs
      tabs <- Map(function(i) list(id = paste0(id, "-", i, "_", tokenUI), name = names(data_list)[i]), seq_len(length(data_list)))

      ui_root <- tags$div(
        id = paste0(id, "ContentAnalysis"),
        class = "row",
        tags$div(class = "col-12 mb-2",
          downloadButton(ns(paste0("download_all_data_excel_", tokenUI)), "ðŸ“¦ Download all in Excel", class = "btn btn-primary my-2")
        ),
        tags$div(class = "col-12", Generate_dashboard_tabs_table(tabs, typseOfTable = rep("DT", length(tabs))))
      )

      insertUI(selector = paste0("#", id, "Content"), ui = ui_root, immediate = TRUE)

      # Populate each tab content
      for (i in seq_along(data_list)) {
        local({
          idx <- i
          df <- data_list[[idx]]
          table_name <- names(data_list)[idx]

          tab_id <- paste0(id, "-", idx, "_", tokenUI)

          # Add per-tab controls (download + plots container) above the DT
          insertUI(
            selector = paste0("#nav-", tab_id),
            where = "afterBegin",
            ui = tags$div(
              class = "my-3",
              fluidRow(
                column(12, class = "d-flex justify-content-between align-items-center mb-2",
                  downloadButton(outputId = paste0("download_", tab_id, "_", tokenUI), label = "ðŸ“¥ Download CSV", class = "btn btn-sm btn-success")
                )
              ),
              tags$div(id = paste0("plots_", tab_id))
            )
          )

          # Plots depending on table type
          if (grepl("intermediate_report", gsub_underscore_dash(" ", "_", tolower(table_name)))) {
            insertUI(
              selector = paste0("#", paste0("plots_", tab_id)),
              where = "beforeEnd",
              ui = fluidRow(
                column(12, class = "col-12 col-md-4", plotlyOutput(outputId = paste0("plot_impact_", tab_id, "_", tokenUI), height = "550px")),
                column(12, class = "col-12 col-md-4", plotlyOutput(outputId = paste0("plot_waterfall_", tab_id, "_", tokenUI), height = "550px")),
                column(12, class = "col-12 col-md-4", plotlyOutput(outputId = paste0("plot_pie_", tab_id, "_", tokenUI), height = "550px"))
              )
            )

            output[[paste0("plot_impact_", tab_id, "_", tokenUI)]] <- renderPlotly({
              req(df$lrm_classification, df$Ressources_before_haircut)
              plot_ly(df,
                x = ~lrm_classification,
                y = ~Ressources_before_haircut,
                type = "bar",
                text = ~scales::percent(Ressources_before_haircut, accuracy = 0.1),
                hoverinfo = "text+y",
                color = ~lrm_classification
              ) %>%
              layout(title = "Resources before haircut", xaxis = list(title = ""), yaxis = list(title = "Impact (%)")) %>%
              layout(paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)')
            })

            output[[paste0("plot_waterfall_", tab_id, "_", tokenUI)]] <- renderPlotly({
              req(df$lrm_classification, df$Financial_Impact)
              df_agg <- df %>%
                dplyr::group_by(lrm_classification) %>%
                dplyr::summarise(Financial_Impact = sum(-Financial_Impact, na.rm = TRUE)) %>%
                dplyr::arrange(desc(abs(Financial_Impact))) %>%
                dplyr::mutate(
                  prefix = paste0(LETTERS[seq_along(lrm_classification)], ". "),
                  label = paste0(prefix, lrm_classification),
                  measure = "relative",
                  text = format(Financial_Impact, big.mark = " ")
                )
              total <- data.frame(
                label = "Total",
                Financial_Impact = sum(df_agg$Financial_Impact, na.rm = TRUE),
                measure = "total",
                text = format(sum(df_agg$Financial_Impact, na.rm = TRUE), big.mark = " ")
              )
              df_waterfall <- dplyr::bind_rows(df_agg[, c("label", "Financial_Impact", "measure", "text")], total)
              plot_ly(
                df_waterfall,
                type = "waterfall",
                x = ~label,
                y = ~Financial_Impact,
                text = ~text,
                measure = ~measure,
                textposition = "outside",
                connector = list(line = list(color = "rgba(63, 63, 63, 0.7)"))
              ) %>%
                layout(
                  title = "Financial Impact",
                  xaxis = list(title = "", tickangle = -45),
                  yaxis = list(title = "Financial Impact (â‚¬)"),
                  paper_bgcolor = 'rgba(0,0,0,0)',
                  plot_bgcolor = 'rgba(0,0,0,0)'
                )
            })

            output[[paste0("plot_pie_", tab_id, "_", tokenUI)]] <- renderPlotly({
              req(df$lrm_classification, df$Weighted_resources_after_encumbrance)
              plot_ly(
                df,
                labels = ~lrm_classification,
                values = ~abs(Weighted_resources_after_encumbrance),
                type = "pie",
                textinfo = "label+percent",
                hoverinfo = "label+value+percent"
              ) %>%
                layout(title = "Weighted Resources After Encumbrance", showlegend = TRUE) %>%
                layout(paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)')
            })
          }

          if (grepl("stress_impact_report", gsub_underscore_dash(" ", "_", tolower(table_name)))) {
            insertUI(
              selector = paste0("#", paste0("plots_", tab_id)),
              where = "beforeEnd",
              ui = fluidRow(
                column(12, class = "col-12 col-md-4 offset-md-4", plotlyOutput(outputId = paste0("plot_pie_", tab_id, "_", tokenUI), height = "550px"))
              )
            )
            output[[paste0("plot_pie_", tab_id, "_", tokenUI)]] <- renderPlotly({
              req(df$risk_module, df$external_figures)
              plot_ly(
                df,
                labels = ~risk_module,
                values = ~abs(external_figures),
                type = "pie",
                textinfo = "label+percent",
                hoverinfo = "label+value+percent"
              ) %>%
                layout(title = "External Figures", showlegend = TRUE) %>%
                layout(paper_bgcolor = 'rgba(0,0,0,0)', plot_bgcolor = 'rgba(0,0,0,0)')
            })
          }

          if (grepl("liquidity_report", gsub_underscore_dash(" ", "_", tolower(table_name)))) {
            df_vals <- df %>%
              dplyr::filter(get(names(df)[1]) %in% c("Excess liquidity", "Stress impact", "Available weighted resources")) %>%
              tidyr::pivot_wider(names_from = names(df)[1], values_from = `New methodology`) %>%
              dplyr::mutate(
                stress = `Stress impact`,
                excess = `Excess liquidity`
              )
            insertUI(
              selector = paste0("#", paste0("plots_", tab_id)),
              where = "beforeEnd",
              ui = fluidRow(
                column(12, plotlyOutput(outputId = paste0("plot_liquidity_", tab_id, "_", tokenUI), height = "200px"))
              )
            )
            output[[paste0("plot_liquidity_", tab_id, "_", tokenUI)]] <- renderPlotly({
              plot_ly(type = "bar", orientation = "h") %>%
                add_trace(
                  x = ~df_vals$`Stress impact`,
                  y = "Available weighted resources",
                  name = "Stress impact",
                  marker = list(color = 'rgba(255, 99, 71, 0.8)'),
                  text = ~format(df_vals$`Stress impact`, big.mark = " "),
                  hoverinfo = "text+x"
                ) %>%
                add_trace(
                  x = ~df_vals$`Excess liquidity`,
                  y = "Available weighted resources",
                  name = "Excess liquidity",
                  marker = list(color = 'rgba(0, 200, 0, 0.7)'),
                  text = ~format(df_vals$`Excess liquidity`, big.mark = " "),
                  hoverinfo = "text+x"
                ) %>%
                layout(
                  barmode = "stack",
                  title = "",
                  xaxis = list(title = "Amount (mEUR)", tickformat = ",.0f"),
                  yaxis = list(title = ""),
                  paper_bgcolor = 'rgba(0,0,0,0)',
                  plot_bgcolor = 'rgba(0,0,0,0)',
                  showlegend = TRUE
                )
            })
          }

          # Table (target id inserted by Generate_dashboard_tabs_table)
          output[[paste0("td_dashboard_", tab_id)]] <- renderDT({
            num_cols <- names(df)[sapply(df, is.numeric)]
            df_clean <- df
            show_total <- grepl("intermediate_report|weighted|stress_impact", gsub_underscore_dash(" ", "_", tolower(table_name)))
            if (show_total && length(num_cols) > 0) {
              total_row <- df_clean[, lapply(.SD, function(x) if (is.numeric(x)) sum(x, na.rm = TRUE) else NA), .SDcols = num_cols]
              total_row[, setdiff(names(df_clean), num_cols) := lapply(setdiff(names(df_clean), num_cols), function(x) "Total")]
              df_clean <- rbind(df_clean, total_row, fill = TRUE)
            }
            dt <- datatable(
              df_clean,
              rownames = FALSE,
              options = list(paging = FALSE, dom = 'tip', autoWidth = TRUE, ordering = TRUE),
              filter = "top"
            )
            for (col in num_cols) {
              if (col %in% c("lrm_weight", "Impact Weighted Resource")) {
                dt <- DT::formatPercentage(dt, columns = col, digits = 2)
              } else {
                dt <- DT::formatCurrency(dt, columns = col, currency = "", digits = 0, interval = 3, mark = " ")
              }
            }
            if (show_total) {
              dt <- DT::formatStyle(dt, columns = 0, target = "row", rows = nrow(df_clean), fontWeight = "bold", backgroundColor = "#f9f9f9")
            }
            dt
          })

          # Downloads
          output[[paste0("download_", tab_id, "_", tokenUI)]] <- downloadHandler(
            filename = function() paste0(gsub("[\\/:*?\"<>|]", "_", table_name), ".csv"),
            content = function(file) {
              fwrite(df, file, row.names = FALSE, sep = user_separator(), quote = TRUE)
            }
          )
        })
      }

      # Download all to Excel
      output[[ns(paste0("download_all_data_excel_", tokenUI))]] <- downloadHandler(
        filename = function() paste0("RiskFrameworkLiquidity_Report_", Sys.Date(), ".xlsx"),
        content = function(file) {
          openxlsx::write.xlsx(data_list, file)
        }
      )

      hidePageSpinner()
      runjs("$('a[href=\"#historyAnalysis\"]').click();")
    }, error = function(e) {
      print(e)
      hidePageSpinner()
      runjs("toastr.error('Error.. please retry again','',toastr.options.timeOut='500');")
    })
  })
}
